[{"/Users/derek/Desktop/MCS/project/tom2/src/index.js":"1","/Users/derek/Desktop/MCS/project/tom2/src/App.js":"2","/Users/derek/Desktop/MCS/project/tom2/src/Header/index.js":"3","/Users/derek/Desktop/MCS/project/tom2/src/Body.js":"4","/Users/derek/Desktop/MCS/project/tom2/src/Home/Home.js":"5","/Users/derek/Desktop/MCS/project/tom2/src/Footer/Footer.js":"6","/Users/derek/Desktop/MCS/project/tom2/src/Tom2/Tom2.js":"7","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Exchange.js":"8","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Swap.js":"9","/Users/derek/Desktop/MCS/project/tom2/src/Tom2/Tom2Stake.js":"10","/Users/derek/Desktop/MCS/project/tom2/src/Header/Setting.js":"11","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool/AddLiquidity.js":"12","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool/LiquidityTokenModal.js":"13","/Users/derek/Desktop/MCS/project/tom2/src/utils/utils.js":"14","/Users/derek/Desktop/MCS/project/tom2/src/utils/hook/useInput.js":"15","/Users/derek/Desktop/MCS/project/tom2/src/assets/Responsive.js":"16","/Users/derek/Desktop/MCS/project/tom2/src/config.js":"17","/Users/derek/Desktop/MCS/project/tom2/src/utils/metaMask.js":"18","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/ConfirmModal.js":"19","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/LoadingModal.js":"20","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool.js":"21","/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool/ImportPool.js":"22","/Users/derek/Desktop/MCS/project/tom2/src/utils/web3Utils.js":"23"},{"size":563,"mtime":1608708930729,"results":"24","hashOfConfig":"25"},{"size":2411,"mtime":1609223042816,"results":"26","hashOfConfig":"25"},{"size":2153,"mtime":1609223042818,"results":"27","hashOfConfig":"25"},{"size":995,"mtime":1609223047432,"results":"28","hashOfConfig":"25"},{"size":1544,"mtime":1608715894546,"results":"29","hashOfConfig":"25"},{"size":348,"mtime":1608704944201,"results":"30","hashOfConfig":"25"},{"size":2102,"mtime":1608716408424,"results":"31","hashOfConfig":"25"},{"size":393,"mtime":1609223047433,"results":"32","hashOfConfig":"25"},{"size":13289,"mtime":1609223047434,"results":"33","hashOfConfig":"25"},{"size":1499,"mtime":1608716408402,"results":"34","hashOfConfig":"25"},{"size":5470,"mtime":1609223042818,"results":"35","hashOfConfig":"25"},{"size":14748,"mtime":1609223047433,"results":"36","hashOfConfig":"25"},{"size":5138,"mtime":1609223047433,"results":"37","hashOfConfig":"25"},{"size":1165,"mtime":1609223047435,"results":"38","hashOfConfig":"25"},{"size":317,"mtime":1609223042819,"results":"39","hashOfConfig":"25"},{"size":325,"mtime":1609223042817,"results":"40","hashOfConfig":"25"},{"size":63252,"mtime":1609223042816,"results":"41","hashOfConfig":"25"},{"size":1334,"mtime":1609223042819,"results":"42","hashOfConfig":"25"},{"size":1746,"mtime":1609223047396,"results":"43","hashOfConfig":"25"},{"size":1652,"mtime":1609223042813,"results":"44","hashOfConfig":"25"},{"size":6523,"mtime":1609223047433,"results":"45","hashOfConfig":"25"},{"size":6511,"mtime":1609223047432,"results":"46","hashOfConfig":"25"},{"size":8174,"mtime":1609223047435,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"2ifagq",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},"/Users/derek/Desktop/MCS/project/tom2/src/index.js",[],["97","98"],"/Users/derek/Desktop/MCS/project/tom2/src/App.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Header/index.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Body.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Home/Home.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Footer/Footer.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Tom2/Tom2.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Exchange.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Swap.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Tom2/Tom2Stake.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Header/Setting.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool/AddLiquidity.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool/LiquidityTokenModal.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/utils/utils.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/utils/hook/useInput.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/assets/Responsive.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/config.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/utils/metaMask.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/ConfirmModal.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/LoadingModal.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool.js",[],"/Users/derek/Desktop/MCS/project/tom2/src/Exchange/Pool/ImportPool.js",["99"],"import React, { useCallback, useEffect, useState } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'react-router-dom'\nimport { getCheckPairContract, myPositionCheck } from 'utils/web3Utils'\nimport LiquidityTokenModal from './LiquidityTokenModal'\nimport { positionLocalStorage } from 'utils/utils'\n\nconst NotFoundBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    &.found {\n        margin-top: 20px;\n        & > p:last-of-type {\n            font-weight: 500;\n            color: #eab640;\n            cursor: pointer;\n            &:hover {\n                text-decoration: underline;\n            }\n        }\n    }\n`\n\nconst ImportPool = ({ history }) => {\n    const [checkPair, setCheckPair] = useState(null)\n    const [addLiquidityInputA, setAddLiquidityInputA] = useState({\n        name: '',\n        symbol: 'Select',\n        balance: '',\n        decimals: '',\n        totalSupply: '',\n        tokenAddress: '',\n        show: false\n    })\n    const [addLiquidityInputB, setAddLiquidityInputB] = useState({\n        name: '',\n        symbol: '',\n        balance: '',\n        decimals: '',\n        totalSupply: '',\n        tokenAddress: '',\n        show: false\n    })\n\n    const checkPairContract = useCallback(async () => {\n        if (addLiquidityInputA.tokenAddress && addLiquidityInputB.tokenAddress) {\n            setCheckPair(await myPositionCheck(addLiquidityInputA.tokenAddress, addLiquidityInputB.tokenAddress))\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [addLiquidityInputA.tokenAddress, addLiquidityInputB.tokenAddress])\n\n    useEffect(() => {\n        checkPairContract()\n    }, [checkPairContract])\n\n    const onClickManagePool = () => {\n        positionLocalStorage.setMyPositionList(addLiquidityInputA.tokenAddress, addLiquidityInputB.tokenAddress)\n        history.push('/exchange/pool')\n    }\n\n    return (\n        <>\n            <div className=\"wrapper\">\n                <div className=\"sub_wrap liqu_wrap sub_wrap05\">\n                    <div className=\"tit\">\n                        <Link to={'/exchange/pool'} className=\"prev\"><img src=\"/images/ico/ico_arrow_back.png\" alt=\"뒤로가기\" /></Link>\n                        <span>Import Pool</span>\n                        <a href=\"#;\" className=\"q_ico\">\n                            <div className=\"help_box\">Find a token…</div>\n                        </a>\n                    </div>\n                    <div className=\"import_wrap\">\n                        <div className=\"select\" onClick={() => setAddLiquidityInputA({ ...addLiquidityInputA, show: true })}>\n                            <p className=\"txt\"><a href=\"#token_pop\" className=\"pop_call\">\n                                {/* <img src=\"/images/ico/ico_eth01.png\" alt=\"\" /> */}\n                                {addLiquidityInputA.symbol}</a>\n                            </p>\n                            <ul>\n                                <li><a href=\"#;\"><img src=\"/images/ico/ico_eth01.png\" alt=\"\" />ETH1</a></li>\n                                <li><a href=\"#;\"><img src=\"/images/ico/ico_eth01.png\" alt=\"\" />ETH2</a></li>\n                                <li><a href=\"#;\"><img src=\"/images/ico/ico_eth01.png\" alt=\"\" />ETH3</a></li>\n                            </ul>\n                        </div>\n                        <div className=\"select select02\" onClick={() => setAddLiquidityInputB({ ...addLiquidityInputB, show: true })}>\n                            <p className=\"txt\"><a href=\"#token_pop\" className=\"pop_call\">{addLiquidityInputB.symbol || 'Select a Token'}</a></p>\n                            <ul>\n                                <li><a href=\"#;\"><img src=\"/images/ico/ico_eth02.png\" alt=\"\" />USDT1</a></li>\n                                <li><a href=\"#;\"><img src=\"/images/ico/ico_eth02.png\" alt=\"\" />USDT2</a></li>\n                                <li><a href=\"#;\"><img src=\"/images/ico/ico_eth02.png\" alt=\"\" />USDT3</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                    {checkPair !== null && (\n                        <>\n                            {checkPair ? (\n                                <>\n                                    <div className=\"position\">\n                                        <p>Your position</p>\n                                        <dl>\n                                            <dt className=\"bold etu\">\n                                                {/* <span className=\"icon01\"><img src=\"/images/ico/ico_eth01.png\" alt=\"\" /></span> */}\n                                                {/* <span className=\"icon02\"><img src=\"/images/ico/ico_eth02.png\" alt=\"\" /></span> */}\n                                                {` ${addLiquidityInputA.symbol}/${addLiquidityInputB.symbol}`}\n                                            </dt>\n                                            <dd className=\"bold\">{checkPair.lpToken.toPrecision(12)}</dd>\n                                            <dt>{addLiquidityInputA.symbol}</dt>\n                                            <dd>{checkPair.token0Value.toPrecision(12)}</dd>\n                                            <dt>{addLiquidityInputB.symbol}</dt>\n                                            <dd>{checkPair.token1Value.toPrecision(12)}</dd>\n                                        </dl>\n                                    </div>\n                                    <NotFoundBox className='found'>\n                                        <p>Pool Found!</p>\n                                        <p onClick={onClickManagePool}>Manage this pool.</p>\n                                    </NotFoundBox>\n                                </>\n                            ) : (\n                                    <NotFoundBox className=\"position\">\n                                        <p>Not Found</p>\n                                    </NotFoundBox>\n                                )}\n                        </>\n                    )}\n                </div>\n            </div>\n            {addLiquidityInputA.show && (\n                <LiquidityTokenModal addLiquidityInput={addLiquidityInputA} setAddLiquidityInput={setAddLiquidityInputA} />\n            )}\n            {addLiquidityInputB.show && (\n                <LiquidityTokenModal addLiquidityInput={addLiquidityInputB} setAddLiquidityInput={setAddLiquidityInputB} />\n            )}\n        </>\n    )\n}\n\nexport default ImportPool","/Users/derek/Desktop/MCS/project/tom2/src/utils/web3Utils.js",["100"],"import Web3 from \"web3\"\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from \"config\"\nimport { accountLocalStorage, positionLocalStorage } from \"./utils\"\nimport { metaMaskSendTx } from \"./metaMask\"\n\nconst etherWeb3 = new Web3(window.ethereum)\n\nexport const getTokenBalance = async (tokenAddress, account) => {\n    const contractObject = new etherWeb3.eth.Contract(CONTRACT_ABI.ERC, tokenAddress)\n\n    return {\n        name: await contractObject.methods.name().call(),\n        symbol: await contractObject.methods.symbol().call(),\n        totalSupply: await contractObject.methods.totalSupply().call(),\n        decimals: await contractObject.methods.decimals().call(),\n        balance: await contractObject.methods.balanceOf(account).call(),\n        tokenAddress,\n    }\n}\n\nexport const createCalculatePrice = (addLiquidityInputA, addLiquidityInputB) => {\n    if (!addLiquidityInputA.amount || !addLiquidityInputB.amount) { return false }\n    if (!addLiquidityInputA.tokenAddress\n        || !addLiquidityInputB.tokenAddress\n        || addLiquidityInputA.tokenAddress === addLiquidityInputB.tokenAddress) {\n        return false\n    }\n\n    return {\n        token0Price: addLiquidityInputB.amount / addLiquidityInputA.amount,\n        token1Price: addLiquidityInputA.amount / addLiquidityInputB.amount\n    }\n}\n\nexport const createPreviewPrice = async (addLiquidityInputA, addLiquidityInputB) => {\n    const prices = createCalculatePrice(addLiquidityInputA, addLiquidityInputB)\n\n    if (!prices) { return false }\n\n    return ({\n        '0': prices.token1Price,\n        '1': prices.token0Price,\n    })\n}\n\nexport const getCheckPairContract = async (tokenAddressA, tokenAddressB) => {\n    const factoryContract = new etherWeb3.eth.Contract(CONTRACT_ABI.FACTORY, CONTRACT_ADDRESS.FACTORY)\n    const pairAddress = await factoryContract.methods.getPair(tokenAddressA, tokenAddressB).call()\n\n    return Number(pairAddress) !== 0\n}\n\nexport const createCheckApprove = async (tokenAddress, amount, decimals) => {\n    const token0Contract = new etherWeb3.eth.Contract(CONTRACT_ABI.ERC, tokenAddress)\n\n    const tokenAllowance = await token0Contract.methods.allowance(accountLocalStorage.getMyAccountAddress(), CONTRACT_ADDRESS.ROUTER).call()\n\n    return tokenAllowance >= Number(amount) * Math.pow(10, decimals)\n}\n\nexport const createConfirmApprove = async (tokenAddress, amount, decimals) => {\n    const token0Contract = new etherWeb3.eth.Contract(CONTRACT_ABI.ERC, tokenAddress)\n\n    const tokenAllowance = await token0Contract.methods.allowance(accountLocalStorage.getMyAccountAddress(), CONTRACT_ADDRESS.ROUTER).call()\n\n    if (Number(tokenAllowance) < Number(amount) * Math.pow(10, decimals)) {\n        await metaMaskSendTx({\n            from: accountLocalStorage.getMyAccountAddress(),\n            to: tokenAddress,\n            data: token0Contract.methods.approve(\n                CONTRACT_ADDRESS.ROUTER,\n                (2n ** 256n - 1n).toString()\n            ).encodeABI()\n        })\n    }\n}\n\nexport const createImportCreate = async (aToken, bToken) => {\n    const routerContract = new etherWeb3.eth.Contract(CONTRACT_ABI.ROUTER, CONTRACT_ADDRESS.ROUTER)\n\n    etherWeb3.utils.toChecksumAddress(accountLocalStorage.getMyAccountAddress())\n    etherWeb3.utils.toChecksumAddress(CONTRACT_ADDRESS.ROUTER)\n    etherWeb3.utils.toChecksumAddress(aToken.tokenAddress)\n    etherWeb3.utils.toChecksumAddress(bToken.tokenAddress)\n\n    await metaMaskSendTx({\n        from: accountLocalStorage.getMyAccountAddress(),\n        to: CONTRACT_ADDRESS.ROUTER,\n        data: routerContract.methods.addLiquidity(\n            aToken.tokenAddress,\n            bToken.tokenAddress,\n            Number(aToken.amount) * Math.pow(10, aToken.decimals),\n            Number(bToken.amount) * Math.pow(10, bToken.decimals),\n            Number(aToken.amount) * Math.pow(10, aToken.decimals),\n            Number(bToken.amount) * Math.pow(10, bToken.decimals),\n            accountLocalStorage.getMyAccountAddress(),\n            Math.floor((+new Date()) / 1000) + 3600\n        ).encodeABI(),\n        value: 0x0\n    })\n}\n\nexport const addLiquidityGatherPairData = async (tokenAddressA, tokenAddressB) => {\n    const factoryContract = new etherWeb3.eth.Contract(CONTRACT_ABI.FACTORY, CONTRACT_ADDRESS.FACTORY)\n    const pairAddress = await factoryContract.methods.getPair(tokenAddressA, tokenAddressB).call()\n\n    if (Number(pairAddress) === 0) {\n        return false\n    }\n\n    const pairContract = new etherWeb3.eth.Contract(CONTRACT_ABI.PAIR, pairAddress)\n    const pairToken0 = await pairContract.methods.token0().call()\n    const pairToken1 = await pairContract.methods.token1().call()\n\n    const token0Contract = new etherWeb3.eth.Contract(CONTRACT_ABI.ERC, tokenAddressA)\n    const token1Contract = new etherWeb3.eth.Contract(CONTRACT_ABI.ERC, tokenAddressB)\n\n    const token0Symbol = await token0Contract.methods.symbol().call()\n    const token1Symbol = await token1Contract.methods.symbol().call()\n\n    const token0Decimals = await token0Contract.methods.decimals().call()\n    const token1Decimals = await token1Contract.methods.decimals().call()\n\n    const tokenReserves = await pairContract.methods.getReserves().call()\n    const token0Reserve = pairToken0 === tokenAddressA ? tokenReserves._reserve0 : tokenReserves._reserve1\n    const token1Reserve = pairToken1 === tokenAddressB ? tokenReserves._reserve1 : tokenReserves._reserve0\n\n    const pairSupply = await pairContract.methods.totalSupply().call()\n    const pairDecimals = await pairContract.methods.decimals().call()\n\n    const pairContractBalance = await pairContract.methods.balanceOf(accountLocalStorage.getMyAccountAddress()).call()\n\n    return {\n        token0Symbol,\n        token0Reserve,\n        token1Reserve,\n        token1Symbol,\n        token0Decimals,\n        token1Decimals,\n        pairSupply,\n        pairDecimals,\n        pairContractBalance\n    }\n}\n\nexport const addLiquidityPreview = async (aToken, bToken) => {\n    const pairData = await addLiquidityGatherPairData(aToken.tokenAddress, bToken.tokenAddress)\n\n    if (!pairData) {\n        return false\n    }\n\n    const token0Reserve = (pairData.token0Reserve / Math.pow(10, pairData.token0Decimals))\n    const token1Reserve = (pairData.token1Reserve / Math.pow(10, pairData.token1Decimals))\n\n    const token0Price = token1Reserve / token0Reserve\n    // const token1Price = token0Reserve / token1Reserve\n\n    const calcTokenAmountB = aToken.amount * token0Price\n\n    const pairSupply = pairData.pairSupply / Math.pow(10, pairData.pairDecimals)\n\n    // console.log(`Reserve 0 : ${token0Reserve}<br>Reserve 1 : ${token1Reserve}<br>Supply : ${pairSupply}`)\n\n    const token0Expect = token0Reserve + Number(aToken.amount)\n    const token1Expect = token1Reserve + Number(calcTokenAmountB)\n    const totalShare = Math.sqrt(token0Expect * token1Expect / 1e36 * Math.pow(10, pairData.token0Decimals) * Math.pow(10, pairData.token1Decimals))\n\n    // console.log(totalShare, pairSupply, totalShare - pairSupply)\n\n    // console.log(`Reserve 0 : ${token0Expect}<br>Reserve 1 : ${token1Expect}<br>Sqrt K : ${totalShare}<br>Delta Share : ${totalShare - pairSupply}<br>As rate : `)\n\n    const calcText = await createPreviewPrice(aToken, { ...bToken, amount: calcTokenAmountB })\n\n    return {\n        '0': calcText['0'],\n        '1': calcText['1'],\n        '2': `${((totalShare - pairSupply) / totalShare * 100)}`,\n        '3': calcTokenAmountB,\n    }\n}\n\nexport const myPositionCheck = async (tokenAddressA, tokenAddressB) => {\n    const pairData = await addLiquidityGatherPairData(tokenAddressA, tokenAddressB)\n\n    if (!pairData) {\n        return false\n    }\n\n    const lpToken = pairData.pairContractBalance * Math.pow(0.1, pairData.pairDecimals)\n    const persent = pairData.pairContractBalance / pairData.pairSupply\n    const token0Value = pairData.token0Reserve * Math.pow(0.1, pairData.token0Decimals) * persent\n    const token1Value = pairData.token1Reserve * Math.pow(0.1, pairData.token1Decimals) * persent\n\n    return {\n        lpToken,\n        persent,\n        token0Symbol: pairData.token0Symbol,\n        token0Value,\n        token1Symbol: pairData.token1Symbol,\n        token1Value,\n    }\n}",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":30},{"ruleId":"105","severity":1,"message":"109","line":3,"column":31,"nodeType":"107","messageId":"108","endLine":3,"endColumn":51},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'getCheckPairContract' is defined but never used.","Identifier","unusedVar","'positionLocalStorage' is defined but never used.","no-global-assign","no-unsafe-negation"]